/**
 * Definiciones de tipos globales para la aplicación Mercador
 *
 * Este archivo contiene todas las definiciones de tipos TypeScript globales
 * utilizadas en la aplicación. Incluye extensiones del contexto de Hono,
 * tipos de base de datos y otras definiciones compartidas.
 *
 * @module types/global
 *
 * @example
 * ```typescript
 * // Los tipos definidos aquí están disponibles globalmente
 * // sin necesidad de importar
 *
 * interface ContextVariableMap {
 *   userId?: string        // ID del usuario autenticado
 *   userEmail?: string     // Email del usuario autenticado
 *   tokenPayload?: {       // Payload del token JWT
 *     userId: string
 *     email: string
 *   }
 * }
 * ```
 */

// Global type definitions

import type { Hono } from 'hono'

// Extend Hono context to include custom properties
declare module 'hono' {
  interface ContextVariableMap {
    userId?: string
    userEmail?: string
    tokenPayload?: {
      userId: string
      email: string
      iat?: number
      exp?: number
    }
    logger?: import('pino').Logger
    promClient?: typeof import('prom-client')
  }
}

// Database types (these would be generated by Supabase CLI)
// export interface Database {
//   public: {
//     Tables: {
//       users: {
//         Row: {
//           id: string
//           email: string
//           name: string
//           created_at: string
//           updated_at: string
//         }
//         Insert: {
//           id?: string
//           email: string
//           name: string
//           created_at?: string
//           updated_at?: string
//         }
//         Update: {
//           id?: string
//           email?: string
//           name?: string
//           created_at?: string
//           updated_at?: string
//         }
//       }
//       // Add more table types here...
//     }
//   }
// }

// API Response types
export interface ApiResponse<T = any> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

export interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
}

// Common error types
export interface ValidationError {
  field: string
  message: string
}

export interface ApiError {
  success: false
  error: string
  code?: string
  details?: ValidationError[]
}
